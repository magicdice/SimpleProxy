#!/usr/bin/env node

var http = require('http')
	//, fs = require('fs')
	, url = require('url')
	, qs = require('querystring')
        , connect = require('connect')
	, mongoose = require('mongoose')
  	, db = mongoose.createConnection('localhost', 'proxy')
  	, Schema = mongoose.Schema 
	, argv = require('optimist').argv ;

db.on('error', function() {
        console.error.bind(console, 'MongoDB connection error:');
}) ;
db.once('open', function () {
        console.log("connected with MongoDB") ;
});

var cachedSchema = new Schema({
        url: String,
        method: String,
	statusCode: Number,
        headers: Schema.Types.Mixed,
	body: Schema.Types.Mixed,
	query: Schema.Types.Mixed,
        data: Buffer
});
var Cached = db.model('response', cachedSchema) ;

var app = connect() 
	.use(function(req, res, next) {
		console.log(req.url) ;
        	if(req.method=='POST') {
                	var body = '' ;
                	req.on('data', function (chunk) {
                        	body += chunk ;
                	});
                	req.on('end',function(){
                        	req.body = qs.parse(body);
                        	next() ;
                	});
        	}
		else
			next() ;
	})
	//.use(connect.bodyParser())	// doesn't work
	.use(connect.query())
	.use(serveFromDB) 
	.use(actAsProxyServer) 
	.use(cacheContent) ;

http.createServer(app).listen(8000) ;

/**************************************************/

// search MongoDB for cached responses
function serveFromDB(req, res, next) {
	if ( !argv.proxy )  {
		var searchObj = buildSearchObj( buildSearchObj( {url: req.url.split('?')[0]},  'query', req.query), 'body', req.body ) ;

		Cached.findOne( searchObj, function(err, cache) {
			if( err ) throw err ;
			else {
				if ( cache ) {
					console.log("served from cache "+req.url) ;
					res.writeHead(cache.statusCode, cache.headers) ;
        				res.end(cache.data) ;
				}
				else
					next() ;
			}
		}) ;
	}
	else
		next() ;
}

function buildSearchObj( search, key, input ) {
	for( var i in input ) {
		if( Object.prototype.hasOwnProperty.call(input, i) && !i.match(argv['ignore-params']) )
			search[key + '.' + i] = input[i] ;			
	}	
	return search ;
}

function actAsProxyServer(req, res, next) {
	var options = { host: argv.host||'localhost', port: argv.port||8080, path: req.url, method: req.method, headers: JSON.parse(JSON.stringify(req.headers).replace('8000','8080')) } ;

	console.log("act as proxy for " + req.url) ;

        var callback = function(response) {
                var chunks = [] ;
                response.on('data', function (chunk) {
                        chunks.push(chunk) ;
                });

                //the whole response has been recieved, so we just print it out here
                response.on('end', function () {
				req.proxy = { response: response, data: Buffer.concat(chunks), statusCode: response.statusCode } ;
				next() ;
                });
        } ;
 	var server = http.request(options, callback) ;
	server.on('error', function(e) {
  		console.log('problem with request: ' + e.message + " (" + req.url + ")");
	});

	if ( req.method == 'POST' ) 
		server.write(qs.stringify(req.body));
	server.end() ;
}

function cacheContent(req, res, next) {

	var cached = new Cached() ;
	cached.url = req.url.split('?')[0] ;
	cached.method = req.method ;
	cached.data = req.proxy.data ;
	cached.headers = req.proxy.response.headers ;
	cached.body = req.body ;
	cached.query = req.query ;
	cached.statusCode = req.proxy.response.statusCode ;

	cached.save(function(err) {
       		if (err) throw err ;
	}) ;

	res.writeHead(req.proxy.response.statusCode, req.proxy.response.headers) ;
        res.end(req.proxy.data) ;
}

/*
http.createServer(function (req, res) {
	fs.readFile('testimg.png', 'binary', function(err, data) {
		res.writeHead(200, { 'content-type': 'image/png' });
		res.end(data, 'binary');
	}) ;
  	//res.writeHead(200, { 'Content-Type': 'text/plain' });
  	//res.write('request successfully proxied to: ' + req.url + '\n' + JSON.stringify(req.headers, true, 2));
  	//res.end();
}).listen(8080);
*/
