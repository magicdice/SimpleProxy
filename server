#!/usr/bin/env node

var http = require('http')
	, url = require('url')
	, fs  = require('fs')
	, qs = require('querystring')
	, connect = require('connect')
        , cache = require('./lib/storage')
        , proxy = require('./lib/proxy')
	, argv = require('optimist').argv
	, admin = require('./lib/admin') ;

if ( argv["help"] ) {
	var help = "USAGE: node server [options]\n" ;
	help += "   --host			- remote hostname (localhost)\n" ;
	help += "   --port			- remote port (80)\n" ;
	help += "   --proxy			- true: proxy all request and cache (insert/update) the responses (false)\n" ;
	help += "			  	  false: if possible serve the response from cache\n" ;
	help += "   --ignore-params		- a list of GET/POST parameter to be ignored for the cache response lookup\n" ;
	help += "   --map-url, --map-to-fs	- map urls to the filesystem\n" ;
	help += "   --map-ignore-extensions 	- a list of file extensions which should not be served from the file system (e.g. jsp and php)\n" ;
	console.log(help) ;
	process.exit(1) ;
}

if ( argv["map-url"] && !argv["map-to-fs"] || !argv["map-url"] && argv["map-to-fs"] ) {
	console.log("ERROR: if option --map-url is defined, --to-fs should be defined too!!\n") ;
	process.exit(1) ;
}

var mapIgnoreExtensions_re = null ;
if ( argv["map-ignore-extensions"] )  {
	mapIgnoreExtensions_re = new RegExp( argv["map-ignore-extensions"].replace(/,|\s/g, "|") ) ;
}

connect.logger.token("served-by", function(req,res) {
	return  req["served-by"] ;
}) ;
connect.logger.token("statusCode", function(req,res) {
	return  res["statusCode"] ;
}) ;

var app = connect()
	.use(connect.logger(':date - :method :url, :response-time ms - :served-by (statusCode: :statusCode)'))  
	.use( connect.bodyParser() ) ; // parse body before anything else

// serve request from filesystem ?
if ( argv["map-url"] ) {
	app.use(function(req, res, next) {
		if ( argv["map-ignore-extensions"] ) {
			var urlSplit = req.url.split("?") ;

			if ( urlSplit[0].match(mapIgnoreExtensions_re) )
				urlSplit[0] += "-" ;
			req.url = urlSplit.join("?") ;

			// determine if file exist (for logging only)
			var path = argv["map-to-fs"] + urlSplit[0].replace(argv["map-url"], "") ;
			fs.exists(path, function(exists) {
				if ( exists )
					req["served-by"] = "served from the filesystem" ;
				next() ;
			}) ;
		} 
		else
			next() ;
	}) 
	.use(argv["map-url"], connect.static(argv["map-to-fs"]) )
	.use(function(req, res, next) {
		var urlSplit = req.url.split("?") ;
		if ( urlSplit[0].match(/-$/) )
			urlSplit[0] = urlSplit[0].slice(0, -1) ;
		req.url = urlSplit.join("?") ;
		next() ;
	}) ;
}
app.use(connect.query())
   .use(serveFromDB) 
   .use(actAsProxyServer) 
   .use(cacheContent)
   .use(function(err, req, res, next) {
	console.log("ERROR: " + JSON.stringify(err)) ;
	console.log("URL: " + req.url + " ( " + req.method + " )") ;
	console.log("REQUEST HEADERS:") ;
	console.dir(req.headers) ;
	console.log("body:") ;
	console.dir(req.body) ;

	res.writeHead(500);
        res.end('Error occurred, sorry.');
   }) ;

http.createServer(app).listen(8000) ;

/**************************************************/

// search MongoDB for cached responses
function serveFromDB(req, res, next) {
	if ( !argv.proxy )  {
		cache.load(req, function(cachedObj) {
			if ( cachedObj ) {
				req["served-by"] = "served from cache/db" ;
				res.writeHead(cachedObj.statusCode, cachedObj.headers) ;
        			res.end(cachedObj.binaryData ? cachedObj.binaryData : cachedObj.utf8Data) ;
			}
			else
				next() ;
		}) ;
	}
	else
		next() ;
}

function actAsProxyServer(req, res, next) {
	req["served-by"] = "request proxied" ;
	proxy.send(req, function(response, data) {
		req.proxy = { data: data, headers: response.headers, statusCode: response.statusCode } ;
		next() ;
	}) ;
}

function cacheContent(req, res, next) {
	cache.save( req ) ;	

	res.writeHead(req.proxy.statusCode, req.proxy.headers) ;
        res.end(req.proxy.data) ;
}

/*
http.createServer(function (req, res) {
	fs.readFile('testimg.png', 'binary', function(err, data) {
		res.writeHead(200, { 'content-type': 'image/png' });
		res.end(data, 'binary');
	}) ;
  	//res.writeHead(200, { 'Content-Type': 'text/plain' });
  	//res.write('request successfully proxied to: ' + req.url + '\n' + JSON.stringify(req.headers, true, 2));
  	//res.end();
}).listen(8080);
*/
